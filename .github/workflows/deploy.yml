name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  LAMBDA_FUNCTION_NAME: Rentminder
  DOTNET_VERSION: "8.0.202"
  NODE_VERSION: "18.14.1"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Create Firebase config file
      - name: Create Firebase config
        working-directory: ./Client
        shell: pwsh
        run: |
          $encodedConfig = "${{ secrets.FIREBASE_CONFIG_BASE64 }}"
          $decodedBytes = [Convert]::FromBase64String($encodedConfig)
          $decodedText = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
          $decodedText | Out-File -FilePath firebase.json -Encoding UTF8

      # Install frontend dependencies and build
      - name: Install and build frontend
        working-directory: ./Client
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          npm ci
          npm run build

      # Verify wwwroot directory exists
      - name: Ensure wwwroot directory exists
        working-directory: ./API
        run: mkdir -p wwwroot

      # Build and publish .NET project
      - name: Build and publish .NET project
        working-directory: ./API
        run: |
          dotnet restore
          dotnet publish -c Release -o ./publish

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Deploy to Lambda
      - name: Deploy to Lambda
        working-directory: ./API/publish
        run: |
          zip -r ../lambda-deployment.zip .
          aws lambda update-function-code --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --zip-file fileb://../lambda-deployment.zip

      # Update Lambda environment variables
      - name: Update Lambda environment
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --runtime dotnet8 \
            --handler API \
            --memory-size 256 \
            --timeout 500 \
